@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class AddressBookParser
Class XYZCommandParser
Class XYZAbcCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class "{abstract}\nXYZCommand" as XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
Class XYZAbcCommand
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" AddressBookParser
AddressBookParser .left.> XYZCommandParser: creates >

XYZAbcCommandParser ..> XYZAbcCommand : creates >
XYZCommandParser ..> XYZAbcCommandParser : creates >
XYZCommandParser ..|> Parser
XYZAbcCommandParser ..> ArgumentMultimap
XYZAbcCommandParser ..> ArgumentTokenizer
XYZAbcCommandParser -up-|> XYZCommandParser
ArgumentTokenizer .left.> ArgumentMultimap
XYZAbcCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZAbcCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
XYZAbcCommand -left|> XYZCommand
LogicManager .left.> Command : executes >

LogicManager --> Model
Command .right.> Model
note right of XYZCommand: XYZCommand = FacilCommand, \nModCommand, etc
note bottom of XYZAbcCommand: XYZAbcCommand = FacilAddCommand, \nModAddCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
